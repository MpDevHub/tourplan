<div class="h-96 overflow-x-auto">
          <table class="table table-pin-rows">
            <!-- head -->
            <thead>
              <tr>
                <th>No</th>
                <th>Kode Area</th>
                <th>Area</th>
                <th>Mark</th>
                <th>Audio</th>
              </tr>
            </thead>
            <tbody class="">
              <tr v-for="(song, index) in songs" :key="song.title">
                <!-- <td><input type="checkbox" checked="checked" class="checkbox checkbox-warning" /></td> -->
                <td>{{ index + 1 }}</td>
                <td>
                  <div
                    v-if="song.title.startsWith('J')"
                    class="badge badge-success badge-lg"
                  >
                    {{ song.title }}
                  </div>
                  <div
                    v-else-if="song.title.startsWith('A')"
                    class="badge badge-warning badge-lg"
                  >
                    {{ song.title }}
                  </div>
                  <div
                    v-else-if="song.title.startsWith('B')"
                    class="badge badge-error badge-lg"
                  >
                    {{ song.title }}
                  </div>
                  <div
                    v-else-if="song.title.startsWith('C')"
                    class="badge badge-accent badge-lg"
                  >
                    {{ song.title }}
                  </div>
                  <div v-else class="badge badge-info badge-lg">
                    {{ song.title }}
                  </div>
                </td>
                <td>{{ song.artist }}</td>
                <td>
                  <input type="checkbox" class="checkbox checkbox-warning" />
                </td>
                <td>
                  <audio
                    :src="audioSrc(song)"
                    preload="auto"
                    @play="playAudio($event.target)"
                    controls
                  ></audio>
                </td>
              </tr>
            </tbody>
          </table>
        </div>



<div class="grid grid-cols-1 grid-rows-1 text-4xl">
    <table class="table-auto text-center divide-x">
      <thead>
        <tr>
          <th>No</th>
          <th>Area</th>
          <th>Narasi</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="(song, index) in paginatedSongs" :key="song.title">
          <td>{{ song.title }}</td>
          <td>{{ song.artist }}</td>
          <td>
            <button
              class="w-24 h-24 rounded-full bg-blue-500 focus:outline-none"
              @click="togglePlay(song)"
            >
              <font-awesome-icon :icon="isPlaying ? 'pause' : 'play'" />
            </button>
          </td>
        </tr>
      </tbody>
    </table>

    <!-- <div class="card shadow-xl">
      <div class="card-body text-center items-center">
        <h2 class="card-title text-center">{{ song.title }}</h2>
        <p>{{ song.artist }}</p>
        <div class="card-actions">
          <button
            class="w-24 h-24 rounded-full bg-blue-500 focus:outline-none"
            @click="togglePlay(song)"
          >
            <font-awesome-icon :icon="isPlaying ? 'pause' : 'play'" />
          </button>
        </div>
      </div>
    </div> -->
  </div>
  <div class="flex justify-center mt-4">
    <button
      class="btn btn-sm btn-outline btn-prev"
      @click="prevPage"
      :disabled="currentPage === 1"
    >
      Prev
    </button>
    <button
      class="btn btn-sm btn-outline btn-next"
      @click="nextPage"
      :disabled="currentPage === totalPages"
    >
      Next
    </button>
  </div>


  <!-- <script setup>
import { ref, computed } from 'vue';
import { songs } from '../songs'; // Import your data source

// Reactive references
const selectedLanguage = ref('ina');
const currentAudio = ref(null);
const isPlaying = ref(false);
const playingSongIndex = ref(null);

// Pagination state
const currentPage = ref(1);
const cardsPerPage = 4; // Fixed value

// Computed properties
const paginatedSongs = computed(() => {
  const start = (currentPage.value - 1) * cardsPerPage;
  return songs.slice(start, start + cardsPerPage);
});

const totalPages = computed(() => Math.ceil(songs.length / cardsPerPage));

const currentSongDuration = computed(() => {
  return currentAudio.value ? currentAudio.value.duration : 0;
});

// Helper functions
const getAudioSrc = (song) => song.audio[selectedLanguage.value];

const playAudio = (song, index) => {
  if (currentAudio.value) {
    currentAudio.value.pause();
  }

  paginatedSongs.value.forEach((s, i) => {
    s.playing = (i === index);
  });

  if (playingSongIndex.value === index) {
    pauseAudio();
    return;
  }

  playingSongIndex.value = index;
  currentAudio.value = new Audio(getAudioSrc(song));
  currentAudio.value.play();
  isPlaying.value = true;

  currentAudio.value.addEventListener('ended', pauseAudio);
};

const pauseAudio = () => {
  if (currentAudio.value) {
    currentAudio.value.pause();
    isPlaying.value = false;
    paginatedSongs.value.forEach(song => song.playing = false);
    currentAudio.value = null;
    playingSongIndex.value = null;
  }
};

const changePage = (direction) => {
  currentPage.value += direction;
};

const nextPage = () => {
  if (currentPage.value < totalPages.value) changePage(1);
};

const prevPage = () => {
  if (currentPage.value > 1) changePage(-1);
};

const loadAndPlayAudio = (song, index) => {
  if (currentAudio.value && playingSongIndex.value === index) {
    pauseAudio();
  } else {
    playAudio(song, index);
  }
};
</script>

<template>
  <div class="navbar bg-base-100">
    <div class="flex-1">
      <a class="btn btn-ghost text-xl">Virtual Plan</a>
      <select v-model="selectedLanguage" class="select select-bordered w-full max-w-xs">
        <option value="ina">Indonesia</option>
        <option value="eng">English</option>
        <option value="chn">Mandarin</option>
      </select>
    </div>
  </div>

  <div class="grid grid-cols-2">
    <div v-for="(song, index) in paginatedSongs" :key="song.title" class="items-center text-center">
      <div class="hero bg-base-200 mb-4">
        <div class="hero-content flex-col lg:flex-row">
          <div>
            <div class="flex justify-center">
              <p class="text-xl">{{ index + 1 }}</p>
              <h1 class="text-5xl font-bold">{{ song.title }}</h1>
            </div>
            <p class="py-6">{{ song.artist }}</p>
            <button class="w-24 h-24 rounded-full bg-blue-500 focus:outline-none" @click="loadAndPlayAudio(song, index)">
              <font-awesome-icon :icon="isPlaying && playingSongIndex === index ? 'pause' : 'play'" />
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="flex justify-between items-center mt-4 sticky-footer">
    <button class="btn btn-outline" @click="prevPage" :disabled="currentPage === 1">Prev</button>

    <button class="btn btn-outline" @click="nextPage" :disabled="currentPage === totalPages">Next</button>
  </div>
</template> -->